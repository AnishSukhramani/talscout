{"ast":null,"code":"// Mock JobRequirement entity for demo purposes\nclass JobRequirement {\n  constructor(data = {}) {\n    this.id = data.id || Date.now().toString();\n    this.job_title = data.job_title || '';\n    this.company_name = data.company_name || '';\n    this.min_experience = data.min_experience || 0;\n    this.max_experience = data.max_experience || 0;\n    this.education_level = data.education_level || 'bachelors';\n    this.skills = data.skills || [];\n    this.soft_skills = data.soft_skills || [];\n    this.location = data.location || '';\n    this.remote_work = data.remote_work || false;\n    this.salary_min = data.salary_min || 0;\n    this.salary_max = data.salary_max || 0;\n    this.priority = data.priority || 'normal';\n    this.status = data.status || 'active';\n    this.created_date = data.created_date || new Date().toISOString();\n  }\n  static async create(data) {\n    const job = new JobRequirement(data);\n\n    // Get existing jobs from localStorage\n    const existing = JSON.parse(localStorage.getItem('jobRequirements') || '[]');\n    existing.push(job);\n    localStorage.setItem('jobRequirements', JSON.stringify(existing));\n    return job;\n  }\n  static async list(sortBy = '-created_date', limit = null) {\n    const jobs = JSON.parse(localStorage.getItem('jobRequirements') || '[]');\n\n    // Sort jobs\n    const sortField = sortBy.startsWith('-') ? sortBy.slice(1) : sortBy;\n    const isDescending = sortBy.startsWith('-');\n    const sorted = jobs.sort((a, b) => {\n      let aVal = a[sortField] || 0;\n      let bVal = b[sortField] || 0;\n      if (typeof aVal === 'string') {\n        return isDescending ? bVal.localeCompare(aVal) : aVal.localeCompare(bVal);\n      }\n      return isDescending ? bVal - aVal : aVal - bVal;\n    });\n    return limit ? sorted.slice(0, limit) : sorted;\n  }\n  static async findById(id) {\n    const jobs = JSON.parse(localStorage.getItem('jobRequirements') || '[]');\n    return jobs.find(j => j.id === id) || null;\n  }\n  static async update(id, data) {\n    const jobs = JSON.parse(localStorage.getItem('jobRequirements') || '[]');\n    const index = jobs.findIndex(j => j.id === id);\n    if (index !== -1) {\n      jobs[index] = {\n        ...jobs[index],\n        ...data\n      };\n      localStorage.setItem('jobRequirements', JSON.stringify(jobs));\n      return jobs[index];\n    }\n    return null;\n  }\n  static async delete(id) {\n    const jobs = JSON.parse(localStorage.getItem('jobRequirements') || '[]');\n    const filtered = jobs.filter(j => j.id !== id);\n    localStorage.setItem('jobRequirements', JSON.stringify(filtered));\n    return true;\n  }\n}\nexport { JobRequirement };","map":{"version":3,"names":["JobRequirement","constructor","data","id","Date","now","toString","job_title","company_name","min_experience","max_experience","education_level","skills","soft_skills","location","remote_work","salary_min","salary_max","priority","status","created_date","toISOString","create","job","existing","JSON","parse","localStorage","getItem","push","setItem","stringify","list","sortBy","limit","jobs","sortField","startsWith","slice","isDescending","sorted","sort","a","b","aVal","bVal","localeCompare","findById","find","j","update","index","findIndex","delete","filtered","filter"],"sources":["C:/Users/Anish Sukhramani/OneDrive/Documents/GitHub/talscout/src/entities/JobRequirement.js"],"sourcesContent":["// Mock JobRequirement entity for demo purposes\r\nclass JobRequirement {\r\n  constructor(data = {}) {\r\n    this.id = data.id || Date.now().toString();\r\n    this.job_title = data.job_title || '';\r\n    this.company_name = data.company_name || '';\r\n    this.min_experience = data.min_experience || 0;\r\n    this.max_experience = data.max_experience || 0;\r\n    this.education_level = data.education_level || 'bachelors';\r\n    this.skills = data.skills || [];\r\n    this.soft_skills = data.soft_skills || [];\r\n    this.location = data.location || '';\r\n    this.remote_work = data.remote_work || false;\r\n    this.salary_min = data.salary_min || 0;\r\n    this.salary_max = data.salary_max || 0;\r\n    this.priority = data.priority || 'normal';\r\n    this.status = data.status || 'active';\r\n    this.created_date = data.created_date || new Date().toISOString();\r\n  }\r\n\r\n  static async create(data) {\r\n    const job = new JobRequirement(data);\r\n    \r\n    // Get existing jobs from localStorage\r\n    const existing = JSON.parse(localStorage.getItem('jobRequirements') || '[]');\r\n    existing.push(job);\r\n    localStorage.setItem('jobRequirements', JSON.stringify(existing));\r\n    \r\n    return job;\r\n  }\r\n\r\n  static async list(sortBy = '-created_date', limit = null) {\r\n    const jobs = JSON.parse(localStorage.getItem('jobRequirements') || '[]');\r\n    \r\n    // Sort jobs\r\n    const sortField = sortBy.startsWith('-') ? sortBy.slice(1) : sortBy;\r\n    const isDescending = sortBy.startsWith('-');\r\n    \r\n    const sorted = jobs.sort((a, b) => {\r\n      let aVal = a[sortField] || 0;\r\n      let bVal = b[sortField] || 0;\r\n      \r\n      if (typeof aVal === 'string') {\r\n        return isDescending ? bVal.localeCompare(aVal) : aVal.localeCompare(bVal);\r\n      }\r\n      \r\n      return isDescending ? bVal - aVal : aVal - bVal;\r\n    });\r\n    \r\n    return limit ? sorted.slice(0, limit) : sorted;\r\n  }\r\n\r\n  static async findById(id) {\r\n    const jobs = JSON.parse(localStorage.getItem('jobRequirements') || '[]');\r\n    return jobs.find(j => j.id === id) || null;\r\n  }\r\n\r\n  static async update(id, data) {\r\n    const jobs = JSON.parse(localStorage.getItem('jobRequirements') || '[]');\r\n    const index = jobs.findIndex(j => j.id === id);\r\n    \r\n    if (index !== -1) {\r\n      jobs[index] = { ...jobs[index], ...data };\r\n      localStorage.setItem('jobRequirements', JSON.stringify(jobs));\r\n      return jobs[index];\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  static async delete(id) {\r\n    const jobs = JSON.parse(localStorage.getItem('jobRequirements') || '[]');\r\n    const filtered = jobs.filter(j => j.id !== id);\r\n    localStorage.setItem('jobRequirements', JSON.stringify(filtered));\r\n    return true;\r\n  }\r\n}\r\n\r\nexport { JobRequirement };\r\n"],"mappings":"AAAA;AACA,MAAMA,cAAc,CAAC;EACnBC,WAAWA,CAACC,IAAI,GAAG,CAAC,CAAC,EAAE;IACrB,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACC,EAAE,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAC1C,IAAI,CAACC,SAAS,GAAGL,IAAI,CAACK,SAAS,IAAI,EAAE;IACrC,IAAI,CAACC,YAAY,GAAGN,IAAI,CAACM,YAAY,IAAI,EAAE;IAC3C,IAAI,CAACC,cAAc,GAAGP,IAAI,CAACO,cAAc,IAAI,CAAC;IAC9C,IAAI,CAACC,cAAc,GAAGR,IAAI,CAACQ,cAAc,IAAI,CAAC;IAC9C,IAAI,CAACC,eAAe,GAAGT,IAAI,CAACS,eAAe,IAAI,WAAW;IAC1D,IAAI,CAACC,MAAM,GAAGV,IAAI,CAACU,MAAM,IAAI,EAAE;IAC/B,IAAI,CAACC,WAAW,GAAGX,IAAI,CAACW,WAAW,IAAI,EAAE;IACzC,IAAI,CAACC,QAAQ,GAAGZ,IAAI,CAACY,QAAQ,IAAI,EAAE;IACnC,IAAI,CAACC,WAAW,GAAGb,IAAI,CAACa,WAAW,IAAI,KAAK;IAC5C,IAAI,CAACC,UAAU,GAAGd,IAAI,CAACc,UAAU,IAAI,CAAC;IACtC,IAAI,CAACC,UAAU,GAAGf,IAAI,CAACe,UAAU,IAAI,CAAC;IACtC,IAAI,CAACC,QAAQ,GAAGhB,IAAI,CAACgB,QAAQ,IAAI,QAAQ;IACzC,IAAI,CAACC,MAAM,GAAGjB,IAAI,CAACiB,MAAM,IAAI,QAAQ;IACrC,IAAI,CAACC,YAAY,GAAGlB,IAAI,CAACkB,YAAY,IAAI,IAAIhB,IAAI,CAAC,CAAC,CAACiB,WAAW,CAAC,CAAC;EACnE;EAEA,aAAaC,MAAMA,CAACpB,IAAI,EAAE;IACxB,MAAMqB,GAAG,GAAG,IAAIvB,cAAc,CAACE,IAAI,CAAC;;IAEpC;IACA,MAAMsB,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;IAC5EJ,QAAQ,CAACK,IAAI,CAACN,GAAG,CAAC;IAClBI,YAAY,CAACG,OAAO,CAAC,iBAAiB,EAAEL,IAAI,CAACM,SAAS,CAACP,QAAQ,CAAC,CAAC;IAEjE,OAAOD,GAAG;EACZ;EAEA,aAAaS,IAAIA,CAACC,MAAM,GAAG,eAAe,EAAEC,KAAK,GAAG,IAAI,EAAE;IACxD,MAAMC,IAAI,GAAGV,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;;IAExE;IACA,MAAMQ,SAAS,GAAGH,MAAM,CAACI,UAAU,CAAC,GAAG,CAAC,GAAGJ,MAAM,CAACK,KAAK,CAAC,CAAC,CAAC,GAAGL,MAAM;IACnE,MAAMM,YAAY,GAAGN,MAAM,CAACI,UAAU,CAAC,GAAG,CAAC;IAE3C,MAAMG,MAAM,GAAGL,IAAI,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACjC,IAAIC,IAAI,GAAGF,CAAC,CAACN,SAAS,CAAC,IAAI,CAAC;MAC5B,IAAIS,IAAI,GAAGF,CAAC,CAACP,SAAS,CAAC,IAAI,CAAC;MAE5B,IAAI,OAAOQ,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAOL,YAAY,GAAGM,IAAI,CAACC,aAAa,CAACF,IAAI,CAAC,GAAGA,IAAI,CAACE,aAAa,CAACD,IAAI,CAAC;MAC3E;MAEA,OAAON,YAAY,GAAGM,IAAI,GAAGD,IAAI,GAAGA,IAAI,GAAGC,IAAI;IACjD,CAAC,CAAC;IAEF,OAAOX,KAAK,GAAGM,MAAM,CAACF,KAAK,CAAC,CAAC,EAAEJ,KAAK,CAAC,GAAGM,MAAM;EAChD;EAEA,aAAaO,QAAQA,CAAC5C,EAAE,EAAE;IACxB,MAAMgC,IAAI,GAAGV,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;IACxE,OAAOO,IAAI,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC9C,EAAE,KAAKA,EAAE,CAAC,IAAI,IAAI;EAC5C;EAEA,aAAa+C,MAAMA,CAAC/C,EAAE,EAAED,IAAI,EAAE;IAC5B,MAAMiC,IAAI,GAAGV,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;IACxE,MAAMuB,KAAK,GAAGhB,IAAI,CAACiB,SAAS,CAACH,CAAC,IAAIA,CAAC,CAAC9C,EAAE,KAAKA,EAAE,CAAC;IAE9C,IAAIgD,KAAK,KAAK,CAAC,CAAC,EAAE;MAChBhB,IAAI,CAACgB,KAAK,CAAC,GAAG;QAAE,GAAGhB,IAAI,CAACgB,KAAK,CAAC;QAAE,GAAGjD;MAAK,CAAC;MACzCyB,YAAY,CAACG,OAAO,CAAC,iBAAiB,EAAEL,IAAI,CAACM,SAAS,CAACI,IAAI,CAAC,CAAC;MAC7D,OAAOA,IAAI,CAACgB,KAAK,CAAC;IACpB;IAEA,OAAO,IAAI;EACb;EAEA,aAAaE,MAAMA,CAAClD,EAAE,EAAE;IACtB,MAAMgC,IAAI,GAAGV,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC;IACxE,MAAM0B,QAAQ,GAAGnB,IAAI,CAACoB,MAAM,CAACN,CAAC,IAAIA,CAAC,CAAC9C,EAAE,KAAKA,EAAE,CAAC;IAC9CwB,YAAY,CAACG,OAAO,CAAC,iBAAiB,EAAEL,IAAI,CAACM,SAAS,CAACuB,QAAQ,CAAC,CAAC;IACjE,OAAO,IAAI;EACb;AACF;AAEA,SAAStD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}