{"ast":null,"code":"// Mock CandidateProfile entity for demo purposes\nclass CandidateProfile {\n  constructor(data = {}) {\n    this.id = data.id || Date.now().toString();\n    this.full_name = data.full_name || '';\n    this.email = data.email || '';\n    this.phone = data.phone || '';\n    this.current_title = data.current_title || '';\n    this.current_company = data.current_company || '';\n    this.experience_years = data.experience_years || 0;\n    this.location = data.location || '';\n    this.education = data.education || '';\n    this.skills = data.skills || [];\n    this.soft_skills = data.soft_skills || [];\n    this.linkedin_url = data.linkedin_url || '';\n    this.naukri_url = data.naukri_url || '';\n    this.portfolio_url = data.portfolio_url || '';\n    this.match_score = data.match_score || 0;\n    this.source_platform = data.source_platform || 'linkedin';\n    this.job_requirement_id = data.job_requirement_id || '';\n    this.created_date = data.created_date || new Date().toISOString();\n  }\n  static async create(data) {\n    const candidate = new CandidateProfile(data);\n\n    // Get existing candidates from localStorage\n    const existing = JSON.parse(localStorage.getItem('candidates') || '[]');\n    existing.push(candidate);\n    localStorage.setItem('candidates', JSON.stringify(existing));\n    return candidate;\n  }\n  static async list(sortBy = '-created_date', limit = null) {\n    const candidates = JSON.parse(localStorage.getItem('candidates') || '[]');\n\n    // Sort candidates\n    const sortField = sortBy.startsWith('-') ? sortBy.slice(1) : sortBy;\n    const isDescending = sortBy.startsWith('-');\n    const sorted = candidates.sort((a, b) => {\n      let aVal = a[sortField] || 0;\n      let bVal = b[sortField] || 0;\n      if (typeof aVal === 'string') {\n        return isDescending ? bVal.localeCompare(aVal) : aVal.localeCompare(bVal);\n      }\n      return isDescending ? bVal - aVal : aVal - bVal;\n    });\n    return limit ? sorted.slice(0, limit) : sorted;\n  }\n  static async findById(id) {\n    const candidates = JSON.parse(localStorage.getItem('candidates') || '[]');\n    return candidates.find(c => c.id === id) || null;\n  }\n  static async update(id, data) {\n    const candidates = JSON.parse(localStorage.getItem('candidates') || '[]');\n    const index = candidates.findIndex(c => c.id === id);\n    if (index !== -1) {\n      candidates[index] = {\n        ...candidates[index],\n        ...data\n      };\n      localStorage.setItem('candidates', JSON.stringify(candidates));\n      return candidates[index];\n    }\n    return null;\n  }\n  static async delete(id) {\n    const candidates = JSON.parse(localStorage.getItem('candidates') || '[]');\n    const filtered = candidates.filter(c => c.id !== id);\n    localStorage.setItem('candidates', JSON.stringify(filtered));\n    return true;\n  }\n}\nexport { CandidateProfile };","map":{"version":3,"names":["CandidateProfile","constructor","data","id","Date","now","toString","full_name","email","phone","current_title","current_company","experience_years","location","education","skills","soft_skills","linkedin_url","naukri_url","portfolio_url","match_score","source_platform","job_requirement_id","created_date","toISOString","create","candidate","existing","JSON","parse","localStorage","getItem","push","setItem","stringify","list","sortBy","limit","candidates","sortField","startsWith","slice","isDescending","sorted","sort","a","b","aVal","bVal","localeCompare","findById","find","c","update","index","findIndex","delete","filtered","filter"],"sources":["C:/Users/Anish Sukhramani/OneDrive/Documents/GitHub/talscout/src/entities/CandidateProfile.js"],"sourcesContent":["// Mock CandidateProfile entity for demo purposes\r\nclass CandidateProfile {\r\n  constructor(data = {}) {\r\n    this.id = data.id || Date.now().toString();\r\n    this.full_name = data.full_name || '';\r\n    this.email = data.email || '';\r\n    this.phone = data.phone || '';\r\n    this.current_title = data.current_title || '';\r\n    this.current_company = data.current_company || '';\r\n    this.experience_years = data.experience_years || 0;\r\n    this.location = data.location || '';\r\n    this.education = data.education || '';\r\n    this.skills = data.skills || [];\r\n    this.soft_skills = data.soft_skills || [];\r\n    this.linkedin_url = data.linkedin_url || '';\r\n    this.naukri_url = data.naukri_url || '';\r\n    this.portfolio_url = data.portfolio_url || '';\r\n    this.match_score = data.match_score || 0;\r\n    this.source_platform = data.source_platform || 'linkedin';\r\n    this.job_requirement_id = data.job_requirement_id || '';\r\n    this.created_date = data.created_date || new Date().toISOString();\r\n  }\r\n\r\n  static async create(data) {\r\n    const candidate = new CandidateProfile(data);\r\n    \r\n    // Get existing candidates from localStorage\r\n    const existing = JSON.parse(localStorage.getItem('candidates') || '[]');\r\n    existing.push(candidate);\r\n    localStorage.setItem('candidates', JSON.stringify(existing));\r\n    \r\n    return candidate;\r\n  }\r\n\r\n  static async list(sortBy = '-created_date', limit = null) {\r\n    const candidates = JSON.parse(localStorage.getItem('candidates') || '[]');\r\n    \r\n    // Sort candidates\r\n    const sortField = sortBy.startsWith('-') ? sortBy.slice(1) : sortBy;\r\n    const isDescending = sortBy.startsWith('-');\r\n    \r\n    const sorted = candidates.sort((a, b) => {\r\n      let aVal = a[sortField] || 0;\r\n      let bVal = b[sortField] || 0;\r\n      \r\n      if (typeof aVal === 'string') {\r\n        return isDescending ? bVal.localeCompare(aVal) : aVal.localeCompare(bVal);\r\n      }\r\n      \r\n      return isDescending ? bVal - aVal : aVal - bVal;\r\n    });\r\n    \r\n    return limit ? sorted.slice(0, limit) : sorted;\r\n  }\r\n\r\n  static async findById(id) {\r\n    const candidates = JSON.parse(localStorage.getItem('candidates') || '[]');\r\n    return candidates.find(c => c.id === id) || null;\r\n  }\r\n\r\n  static async update(id, data) {\r\n    const candidates = JSON.parse(localStorage.getItem('candidates') || '[]');\r\n    const index = candidates.findIndex(c => c.id === id);\r\n    \r\n    if (index !== -1) {\r\n      candidates[index] = { ...candidates[index], ...data };\r\n      localStorage.setItem('candidates', JSON.stringify(candidates));\r\n      return candidates[index];\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  static async delete(id) {\r\n    const candidates = JSON.parse(localStorage.getItem('candidates') || '[]');\r\n    const filtered = candidates.filter(c => c.id !== id);\r\n    localStorage.setItem('candidates', JSON.stringify(filtered));\r\n    return true;\r\n  }\r\n}\r\n\r\nexport { CandidateProfile };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}